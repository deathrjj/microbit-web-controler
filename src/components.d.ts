/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Services,
} from 'microbit-web-bluetooth';
import {
  DeviceInformation,
} from 'microbit-web-bluetooth/types/services/device-information';

export namespace Components {
  interface MicrobitCalibrate {
    /**
    * The button label to calibrate
    */
    'calibrateLabel': string;
    'services': Services;
  }
  interface MicrobitCompass {
    'services': Services;
  }
  interface MicrobitConnect {
    /**
    * The button label to connect
    */
    'connectLabel': string;
    'device': BluetoothDevice;
    /**
    * The button label to disconnect
    */
    'disconnectLabel': string;
  }
  interface MicrobitFirmware {
    'deviceInformation': DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
    /**
    * The text shown when no firmware version
    */
    'noInfo': string;
  }
  interface MicrobitHardware {
    'deviceInformation': DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
    /**
    * The text shown when no hardware version
    */
    'noInfo': string;
  }
  interface MicrobitManufacturer {
    'deviceInformation': DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
    /**
    * The text shown when no manufacturer name
    */
    'noInfo': string;
  }
  interface MicrobitMatrix {
    /**
    * The template for identifying child LEDs
    */
    'idTemplate': string;
    /**
    * The css class for off LEDs
    */
    'offClass': string;
    /**
    * The css class for on LEDs
    */
    'onClass': string;
    'services': Services;
  }
  interface MicrobitModel {
    'deviceInformation': DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
    /**
    * The text shown when no model number
    */
    'noInfo': string;
  }
  interface MicrobitName {
    'device': BluetoothDevice;
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
  }
  interface MicrobitReceive {
    'services': Services;
  }
  interface MicrobitSend {
    /**
    * The text shown on the button
    */
    'buttonLabel': string;
    /**
    * The delimiter to use
    */
    'delimiter': string;
    'services': Services;
  }
  interface MicrobitSerial {
    'deviceInformation': DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
    /**
    * The text shown when no serial number
    */
    'noInfo': string;
  }
  interface MicrobitStateButtonA {
    /**
    * The css class to use when long-pressed
    */
    'longPressClass': string;
    /**
    * The css class to use when released
    */
    'releaseClass': string;
    'services': Services;
    /**
    * The css class to use when short-pressed
    */
    'shortPressClass': string;
  }
  interface MicrobitStateButtonB {
    /**
    * The css class to use when long-pressed
    */
    'longPressClass': string;
    /**
    * The css class to use when released
    */
    'releaseClass': string;
    'services': Services;
    /**
    * The css class to use when short-pressed
    */
    'shortPressClass': string;
  }
  interface MicrobitStateConnection {
    /**
    * The css class to use when connected
    */
    'connectedClass': string;
    'device': BluetoothDevice;
    /**
    * The css class to use when disconnected
    */
    'disconnectedClass': string;
  }
  interface MicrobitStateMovement {
    /**
    * The frequency to read the sensor
    */
    'frequency': number;
    /**
    * The css class to use when moved
    */
    'movedClass': string;
    /**
    * The sensitivity of the sensor
    */
    'sensitivity': number;
    'services': Services;
    /**
    * The css class to use when still
    */
    'stillClass': string;
  }
  interface MicrobitTemperature {
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
    /**
    * The text shown when no temperature
    */
    'noTemperature': string;
    'services': Services;
    /**
    * The interval to check the temperature (ms)
    */
    'temperaturePeriod': number;
  }
  interface MicrobitText {
    /**
    * The text shown on the button
    */
    'buttonLabel': string;
    /**
    * The speed to scroll the text
    */
    'scrollDelay': number;
    'services': Services;
  }
}

declare global {


  interface HTMLMicrobitCalibrateElement extends Components.MicrobitCalibrate, HTMLStencilElement {}
  var HTMLMicrobitCalibrateElement: {
    prototype: HTMLMicrobitCalibrateElement;
    new (): HTMLMicrobitCalibrateElement;
  };

  interface HTMLMicrobitCompassElement extends Components.MicrobitCompass, HTMLStencilElement {}
  var HTMLMicrobitCompassElement: {
    prototype: HTMLMicrobitCompassElement;
    new (): HTMLMicrobitCompassElement;
  };

  interface HTMLMicrobitConnectElement extends Components.MicrobitConnect, HTMLStencilElement {}
  var HTMLMicrobitConnectElement: {
    prototype: HTMLMicrobitConnectElement;
    new (): HTMLMicrobitConnectElement;
  };

  interface HTMLMicrobitFirmwareElement extends Components.MicrobitFirmware, HTMLStencilElement {}
  var HTMLMicrobitFirmwareElement: {
    prototype: HTMLMicrobitFirmwareElement;
    new (): HTMLMicrobitFirmwareElement;
  };

  interface HTMLMicrobitHardwareElement extends Components.MicrobitHardware, HTMLStencilElement {}
  var HTMLMicrobitHardwareElement: {
    prototype: HTMLMicrobitHardwareElement;
    new (): HTMLMicrobitHardwareElement;
  };

  interface HTMLMicrobitManufacturerElement extends Components.MicrobitManufacturer, HTMLStencilElement {}
  var HTMLMicrobitManufacturerElement: {
    prototype: HTMLMicrobitManufacturerElement;
    new (): HTMLMicrobitManufacturerElement;
  };

  interface HTMLMicrobitMatrixElement extends Components.MicrobitMatrix, HTMLStencilElement {}
  var HTMLMicrobitMatrixElement: {
    prototype: HTMLMicrobitMatrixElement;
    new (): HTMLMicrobitMatrixElement;
  };

  interface HTMLMicrobitModelElement extends Components.MicrobitModel, HTMLStencilElement {}
  var HTMLMicrobitModelElement: {
    prototype: HTMLMicrobitModelElement;
    new (): HTMLMicrobitModelElement;
  };

  interface HTMLMicrobitNameElement extends Components.MicrobitName, HTMLStencilElement {}
  var HTMLMicrobitNameElement: {
    prototype: HTMLMicrobitNameElement;
    new (): HTMLMicrobitNameElement;
  };

  interface HTMLMicrobitReceiveElement extends Components.MicrobitReceive, HTMLStencilElement {}
  var HTMLMicrobitReceiveElement: {
    prototype: HTMLMicrobitReceiveElement;
    new (): HTMLMicrobitReceiveElement;
  };

  interface HTMLMicrobitSendElement extends Components.MicrobitSend, HTMLStencilElement {}
  var HTMLMicrobitSendElement: {
    prototype: HTMLMicrobitSendElement;
    new (): HTMLMicrobitSendElement;
  };

  interface HTMLMicrobitSerialElement extends Components.MicrobitSerial, HTMLStencilElement {}
  var HTMLMicrobitSerialElement: {
    prototype: HTMLMicrobitSerialElement;
    new (): HTMLMicrobitSerialElement;
  };

  interface HTMLMicrobitStateButtonAElement extends Components.MicrobitStateButtonA, HTMLStencilElement {}
  var HTMLMicrobitStateButtonAElement: {
    prototype: HTMLMicrobitStateButtonAElement;
    new (): HTMLMicrobitStateButtonAElement;
  };

  interface HTMLMicrobitStateButtonBElement extends Components.MicrobitStateButtonB, HTMLStencilElement {}
  var HTMLMicrobitStateButtonBElement: {
    prototype: HTMLMicrobitStateButtonBElement;
    new (): HTMLMicrobitStateButtonBElement;
  };

  interface HTMLMicrobitStateConnectionElement extends Components.MicrobitStateConnection, HTMLStencilElement {}
  var HTMLMicrobitStateConnectionElement: {
    prototype: HTMLMicrobitStateConnectionElement;
    new (): HTMLMicrobitStateConnectionElement;
  };

  interface HTMLMicrobitStateMovementElement extends Components.MicrobitStateMovement, HTMLStencilElement {}
  var HTMLMicrobitStateMovementElement: {
    prototype: HTMLMicrobitStateMovementElement;
    new (): HTMLMicrobitStateMovementElement;
  };

  interface HTMLMicrobitTemperatureElement extends Components.MicrobitTemperature, HTMLStencilElement {}
  var HTMLMicrobitTemperatureElement: {
    prototype: HTMLMicrobitTemperatureElement;
    new (): HTMLMicrobitTemperatureElement;
  };

  interface HTMLMicrobitTextElement extends Components.MicrobitText, HTMLStencilElement {}
  var HTMLMicrobitTextElement: {
    prototype: HTMLMicrobitTextElement;
    new (): HTMLMicrobitTextElement;
  };
  interface HTMLElementTagNameMap {
    'microbit-calibrate': HTMLMicrobitCalibrateElement;
    'microbit-compass': HTMLMicrobitCompassElement;
    'microbit-connect': HTMLMicrobitConnectElement;
    'microbit-firmware': HTMLMicrobitFirmwareElement;
    'microbit-hardware': HTMLMicrobitHardwareElement;
    'microbit-manufacturer': HTMLMicrobitManufacturerElement;
    'microbit-matrix': HTMLMicrobitMatrixElement;
    'microbit-model': HTMLMicrobitModelElement;
    'microbit-name': HTMLMicrobitNameElement;
    'microbit-receive': HTMLMicrobitReceiveElement;
    'microbit-send': HTMLMicrobitSendElement;
    'microbit-serial': HTMLMicrobitSerialElement;
    'microbit-state-button-a': HTMLMicrobitStateButtonAElement;
    'microbit-state-button-b': HTMLMicrobitStateButtonBElement;
    'microbit-state-connection': HTMLMicrobitStateConnectionElement;
    'microbit-state-movement': HTMLMicrobitStateMovementElement;
    'microbit-temperature': HTMLMicrobitTemperatureElement;
    'microbit-text': HTMLMicrobitTextElement;
  }
}

declare namespace LocalJSX {
  interface MicrobitCalibrate extends JSXBase.HTMLAttributes<HTMLMicrobitCalibrateElement> {
    /**
    * The button label to calibrate
    */
    'calibrateLabel'?: string;
    'services'?: Services;
  }
  interface MicrobitCompass extends JSXBase.HTMLAttributes<HTMLMicrobitCompassElement> {
    'services'?: Services;
  }
  interface MicrobitConnect extends JSXBase.HTMLAttributes<HTMLMicrobitConnectElement> {
    /**
    * The button label to connect
    */
    'connectLabel'?: string;
    'device'?: BluetoothDevice;
    /**
    * The button label to disconnect
    */
    'disconnectLabel'?: string;
  }
  interface MicrobitFirmware extends JSXBase.HTMLAttributes<HTMLMicrobitFirmwareElement> {
    'deviceInformation'?: DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
    /**
    * The text shown when no firmware version
    */
    'noInfo'?: string;
  }
  interface MicrobitHardware extends JSXBase.HTMLAttributes<HTMLMicrobitHardwareElement> {
    'deviceInformation'?: DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
    /**
    * The text shown when no hardware version
    */
    'noInfo'?: string;
  }
  interface MicrobitManufacturer extends JSXBase.HTMLAttributes<HTMLMicrobitManufacturerElement> {
    'deviceInformation'?: DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
    /**
    * The text shown when no manufacturer name
    */
    'noInfo'?: string;
  }
  interface MicrobitMatrix extends JSXBase.HTMLAttributes<HTMLMicrobitMatrixElement> {
    /**
    * The template for identifying child LEDs
    */
    'idTemplate'?: string;
    /**
    * The css class for off LEDs
    */
    'offClass'?: string;
    /**
    * The css class for on LEDs
    */
    'onClass'?: string;
    'services'?: Services;
  }
  interface MicrobitModel extends JSXBase.HTMLAttributes<HTMLMicrobitModelElement> {
    'deviceInformation'?: DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
    /**
    * The text shown when no model number
    */
    'noInfo'?: string;
  }
  interface MicrobitName extends JSXBase.HTMLAttributes<HTMLMicrobitNameElement> {
    'device'?: BluetoothDevice;
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
  }
  interface MicrobitReceive extends JSXBase.HTMLAttributes<HTMLMicrobitReceiveElement> {
    'services'?: Services;
  }
  interface MicrobitSend extends JSXBase.HTMLAttributes<HTMLMicrobitSendElement> {
    /**
    * The text shown on the button
    */
    'buttonLabel'?: string;
    /**
    * The delimiter to use
    */
    'delimiter'?: string;
    'services'?: Services;
  }
  interface MicrobitSerial extends JSXBase.HTMLAttributes<HTMLMicrobitSerialElement> {
    'deviceInformation'?: DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
    /**
    * The text shown when no serial number
    */
    'noInfo'?: string;
  }
  interface MicrobitStateButtonA extends JSXBase.HTMLAttributes<HTMLMicrobitStateButtonAElement> {
    /**
    * The css class to use when long-pressed
    */
    'longPressClass'?: string;
    /**
    * The css class to use when released
    */
    'releaseClass'?: string;
    'services'?: Services;
    /**
    * The css class to use when short-pressed
    */
    'shortPressClass'?: string;
  }
  interface MicrobitStateButtonB extends JSXBase.HTMLAttributes<HTMLMicrobitStateButtonBElement> {
    /**
    * The css class to use when long-pressed
    */
    'longPressClass'?: string;
    /**
    * The css class to use when released
    */
    'releaseClass'?: string;
    'services'?: Services;
    /**
    * The css class to use when short-pressed
    */
    'shortPressClass'?: string;
  }
  interface MicrobitStateConnection extends JSXBase.HTMLAttributes<HTMLMicrobitStateConnectionElement> {
    /**
    * The css class to use when connected
    */
    'connectedClass'?: string;
    'device'?: BluetoothDevice;
    /**
    * The css class to use when disconnected
    */
    'disconnectedClass'?: string;
  }
  interface MicrobitStateMovement extends JSXBase.HTMLAttributes<HTMLMicrobitStateMovementElement> {
    /**
    * The frequency to read the sensor
    */
    'frequency'?: number;
    /**
    * The css class to use when moved
    */
    'movedClass'?: string;
    /**
    * The sensitivity of the sensor
    */
    'sensitivity'?: number;
    'services'?: Services;
    /**
    * The css class to use when still
    */
    'stillClass'?: string;
  }
  interface MicrobitTemperature extends JSXBase.HTMLAttributes<HTMLMicrobitTemperatureElement> {
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
    /**
    * The text shown when no temperature
    */
    'noTemperature'?: string;
    'services'?: Services;
    /**
    * The interval to check the temperature (ms)
    */
    'temperaturePeriod'?: number;
  }
  interface MicrobitText extends JSXBase.HTMLAttributes<HTMLMicrobitTextElement> {
    /**
    * The text shown on the button
    */
    'buttonLabel'?: string;
    /**
    * The speed to scroll the text
    */
    'scrollDelay'?: number;
    'services'?: Services;
  }

  interface IntrinsicElements {
    'microbit-calibrate': MicrobitCalibrate;
    'microbit-compass': MicrobitCompass;
    'microbit-connect': MicrobitConnect;
    'microbit-firmware': MicrobitFirmware;
    'microbit-hardware': MicrobitHardware;
    'microbit-manufacturer': MicrobitManufacturer;
    'microbit-matrix': MicrobitMatrix;
    'microbit-model': MicrobitModel;
    'microbit-name': MicrobitName;
    'microbit-receive': MicrobitReceive;
    'microbit-send': MicrobitSend;
    'microbit-serial': MicrobitSerial;
    'microbit-state-button-a': MicrobitStateButtonA;
    'microbit-state-button-b': MicrobitStateButtonB;
    'microbit-state-connection': MicrobitStateConnection;
    'microbit-state-movement': MicrobitStateMovement;
    'microbit-temperature': MicrobitTemperature;
    'microbit-text': MicrobitText;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


